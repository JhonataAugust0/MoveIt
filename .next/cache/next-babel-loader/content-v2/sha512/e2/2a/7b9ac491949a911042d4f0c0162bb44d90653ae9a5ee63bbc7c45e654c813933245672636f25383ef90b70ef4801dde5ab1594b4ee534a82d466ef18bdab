{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/jhonata/Downloads/MoveIt-master/src/contexts/CountdownContext.tsx\";\n\n/** Imports\n * Importação do useContext, função do react que per- \n * mite que a aplicação utilize o conceito de contextos.\n * Importação de useState, que permite a utilização de \n * estados na aplicação, além do useEffect, que executa\n * funcionalidades através do comportamento do usuário.\n * Importação do context de Challenges e da estilização\n * do componente,\n */\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport { ChallengesContext } from \"./ChallengesContext\";\n/** interface CountdownContextData\n *  Definição da estrutura de dados, por meio da criação\n * de uma interface, do context de Countdown.  \n */\n\nexport const CountdownContext = /*#__PURE__*/createContext({});\nlet countdownTimeout;\n/** export function CountdownProvider({ children }: CountdownProviderProps) \n *  A função CountextProvider utilzia da interface da \n * estrutura de dados para construir a lógica sintática \n * do cronômetro utilização do useEffect. Além de ana-\n * lisar se o contador está ativo e requisitando as fun\n * ções de acordo com os efeitos que o usuário causar na\n * aplicação.   \n */\n\nexport function CountdownProvider({\n  children\n}) {\n  const {\n    startNewChallenge\n  } = useContext(ChallengesContext);\n  const {\n    0: time,\n    1: setTime\n  } = useState(25 * 60);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false);\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setHasFinished(false);\n    setTime(25 * 60);\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time == 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes,\n      seconds,\n      hasFinished,\n      isActive,\n      startCountdown,\n      resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/jhonata/Downloads/MoveIt-master/src/contexts/CountdownContext.tsx"],"names":["createContext","useContext","useState","useEffect","ChallengesContext","CountdownContext","countdownTimeout","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACEA,aADF,EAGEC,UAHF,EAIEC,QAJF,EAKEC,SALF,QAMO,OANP;AAOA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA;AACA;AACA;AACA;;AAcA,OAAO,MAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AAEP,IAAIM,gBAAJ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAAiE;AACtE,QAAM;AAAEC,IAAAA;AAAF,MAAwBR,UAAU,CAACG,iBAAD,CAAxC;AAEA,QAAM;AAAA,OAACM,IAAD;AAAA,OAAOC;AAAP,MAAkBT,QAAQ,CAAC,KAAK,EAAN,CAAhC;AACA,QAAM;AAAA,OAACU,QAAD;AAAA,OAAWC;AAAX,MAA0BX,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACY,WAAD;AAAA,OAAcC;AAAd,MAAgCb,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMc,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,QAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAA0B;AACxBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,WAASQ,cAAT,GAA0B;AACxBC,IAAAA,YAAY,CAAChB,gBAAD,CAAZ;AACAO,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAJ,IAAAA,OAAO,CAAC,KAAK,EAAN,CAAP;AACD;;AAEDR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACxBJ,MAAAA,gBAAgB,GAAGiB,UAAU,CAAC,MAAM;AAClCZ,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,OAF4B,EAE1B,IAF0B,CAA7B;AAGD,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,IAAI,CAAxB,EAA2B;AAChCK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AAClB;AACF,GAVQ,EAUN,CAACG,QAAD,EAAWF,IAAX,CAVM,CAAT;AAYA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AACE,IAAA,KAAK,EAAE;AACLM,MAAAA,OADK;AAELG,MAAAA,OAFK;AAGLL,MAAAA,WAHK;AAILF,MAAAA,QAJK;AAKLQ,MAAAA,cALK;AAMLC,MAAAA;AANK,KADT;AAAA,cAUGb;AAVH;AAAA;AAAA;AAAA;AAAA,UADF;AAcD","sourcesContent":["/** Imports\n * Importação do useContext, função do react que per- \n * mite que a aplicação utilize o conceito de contextos.\n * Importação de useState, que permite a utilização de \n * estados na aplicação, além do useEffect, que executa\n * funcionalidades através do comportamento do usuário.\n * Importação do context de Challenges e da estilização\n * do componente,\n */\nimport {\n  createContext,\n  ReactNode,\n  useContext,\n  useState,\n  useEffect,\n} from \"react\";\nimport { ChallengesContext } from \"./ChallengesContext\";\n\n/** interface CountdownContextData\n *  Definição da estrutura de dados, por meio da criação\n * de uma interface, do context de Countdown.  \n */\ninterface CountdownContextData {\n  minutes: number;\n  seconds: number;\n  hasFinished: boolean;\n  isActive: boolean;\n  startCountdown: () => void;\n  resetCountdown: () => void;\n}\n\ninterface CountdownProviderProps {\n  children: ReactNode;\n}\n\nexport const CountdownContext = createContext({} as CountdownContextData);\n\nlet countdownTimeout: NodeJS.Timeout;\n\n/** export function CountdownProvider({ children }: CountdownProviderProps) \n *  A função CountextProvider utilzia da interface da \n * estrutura de dados para construir a lógica sintática \n * do cronômetro utilização do useEffect. Além de ana-\n * lisar se o contador está ativo e requisitando as fun\n * ções de acordo com os efeitos que o usuário causar na\n * aplicação.   \n */\nexport function CountdownProvider({ children }: CountdownProviderProps) {\n  const { startNewChallenge } = useContext(ChallengesContext);\n\n  const [time, setTime] = useState(25 * 60);\n  const [isActive, setIsActive] = useState(false);\n  const [hasFinished, setHasFinished] = useState(false);\n\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setHasFinished(false);\n    setTime(25 * 60);\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time == 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n\n  return (\n    <CountdownContext.Provider\n      value={{\n        minutes,\n        seconds,\n        hasFinished,\n        isActive,\n        startCountdown,\n        resetCountdown,\n      }}\n    >\n      {children}\n    </CountdownContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}