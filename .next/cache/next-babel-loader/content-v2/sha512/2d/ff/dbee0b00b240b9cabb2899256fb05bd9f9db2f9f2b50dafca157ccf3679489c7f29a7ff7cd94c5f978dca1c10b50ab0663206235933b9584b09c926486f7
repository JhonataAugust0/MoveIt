{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jhonata/Jhonata/Programa\\xE7\\xE3o/Projetos/NLW04/MoveIt/src/contexts/CountdownContext.tsx\",\n    _s = $RefreshSig$();\n\n/** Imports\n * Importação do useContext, função do react que per- \n * mite que a aplicação utilize o conceito de contextos.\n * Importação de useState, que permite a utilização de \n * estados na aplicação, além do useEffect, que executa\n * funcionalidades através do comportamento do usuário.\n * Importação do context de Challenges e da estilização\n * do componente,\n */\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport { ChallengesContext } from \"./ChallengesContext\";\n/** interface CountdownContextData\n *  Definição da estrutura de dados do context Countdown,\n * por meio da criação de uma interface.  \n */\n\nexport var CountdownContext = /*#__PURE__*/createContext({});\nvar countdownTimeout;\n/** export function CountdownProvider({ children }: CountdownProviderProps) \n *  A função CountextProvider utilzia da interface da \n * estrutura de dados para construir a lógica sintática \n * do cronômetro utilização do useEffect. Além de ana-\n * lisar se o contador está ativo e requisitando as fun\n * ções de acordo com os efeitos que o usuário causar na\n * aplicação.   \n */\n\nexport function CountdownProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useContext = useContext(ChallengesContext),\n      startNewChallenge = _useContext.startNewChallenge;\n\n  var _useState = useState(25 * 60),\n      time = _useState[0],\n      setTime = _useState[1];\n\n  var _useState2 = useState(false),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1];\n\n  var _useState3 = useState(false),\n      hasFinished = _useState3[0],\n      setHasFinished = _useState3[1];\n\n  var _useState4 = useState(false),\n      isCounting = _useState4[0],\n      setIsCounting = _useState4[1];\n\n  var minutes = Math.floor(time / 60);\n  var seconds = time % 60;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setHasFinished(false);\n    setTime(25 * 60);\n  }\n\n  useEffect(function () {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(function () {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time == 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes: minutes,\n      seconds: seconds,\n      hasFinished: hasFinished,\n      isActive: isActive,\n      isCounting: isCounting,\n      startCountdown: startCountdown,\n      resetCountdown: resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CountdownProvider, \"15uuKxVXgwdYaGS3qZGks2QJ3lo=\");\n\n_c = CountdownProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountdownProvider\");","map":{"version":3,"sources":["/home/jhonata/Jhonata/Programação/Projetos/NLW04/MoveIt/src/contexts/CountdownContext.tsx"],"names":["createContext","useContext","useState","useEffect","ChallengesContext","CountdownContext","countdownTimeout","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","isCounting","setIsCounting","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACEA,aADF,EAGEC,UAHF,EAIEC,QAJF,EAKEC,SALF,QAMO,OANP;AAOA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA;AACA;AACA;AACA;;AAeA,OAAO,IAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AAEP,IAAIM,gBAAJ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,OAAiE;AAAA;;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;;AAAA,oBACxCP,UAAU,CAACG,iBAAD,CAD8B;AAAA,MAC9DK,iBAD8D,eAC9DA,iBAD8D;;AAAA,kBAG9CP,QAAQ,CAAC,KAAK,EAAN,CAHsC;AAAA,MAG/DQ,IAH+D;AAAA,MAGzDC,OAHyD;;AAAA,mBAItCT,QAAQ,CAAC,KAAD,CAJ8B;AAAA,MAI/DU,QAJ+D;AAAA,MAIrDC,WAJqD;;AAAA,mBAKhCX,QAAQ,CAAC,KAAD,CALwB;AAAA,MAK/DY,WAL+D;AAAA,MAKlDC,cALkD;;AAAA,mBAOlCb,QAAQ,CAAC,KAAD,CAP0B;AAAA,MAO/Dc,UAP+D;AAAA,MAOnDC,aAPmD;;AAStE,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWV,IAAI,GAAG,EAAlB,CAAhB;AACA,MAAMW,OAAO,GAAGX,IAAI,GAAG,EAAvB;;AAEA,WAASY,cAAT,GAA0B;AACxBT,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,WAASU,cAAT,GAA0B;AACxBC,IAAAA,YAAY,CAAClB,gBAAD,CAAZ;AACAO,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAJ,IAAAA,OAAO,CAAC,KAAK,EAAN,CAAP;AACD;;AAEDR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIS,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACxBJ,MAAAA,gBAAgB,GAAGmB,UAAU,CAAC,YAAM;AAClCd,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,OAF4B,EAE1B,IAF0B,CAA7B;AAGD,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,IAAI,CAAxB,EAA2B;AAChCK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AAClB;AACF,GAVQ,EAUN,CAACG,QAAD,EAAWF,IAAX,CAVM,CAAT;AAYA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AACE,IAAA,KAAK,EAAE;AACLQ,MAAAA,OAAO,EAAPA,OADK;AAELG,MAAAA,OAAO,EAAPA,OAFK;AAGLP,MAAAA,WAAW,EAAXA,WAHK;AAILF,MAAAA,QAAQ,EAARA,QAJK;AAKLI,MAAAA,UAAU,EAAVA,UALK;AAMLM,MAAAA,cAAc,EAAdA,cANK;AAOLC,MAAAA,cAAc,EAAdA;AAPK,KADT;AAAA,cAWGf;AAXH;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GAlDeD,iB;;KAAAA,iB","sourcesContent":["/** Imports\n * Importação do useContext, função do react que per- \n * mite que a aplicação utilize o conceito de contextos.\n * Importação de useState, que permite a utilização de \n * estados na aplicação, além do useEffect, que executa\n * funcionalidades através do comportamento do usuário.\n * Importação do context de Challenges e da estilização\n * do componente,\n */\nimport {\n  createContext,\n  ReactNode,\n  useContext,\n  useState,\n  useEffect,\n} from \"react\";\nimport { ChallengesContext } from \"./ChallengesContext\";\n\n/** interface CountdownContextData\n *  Definição da estrutura de dados do context Countdown,\n * por meio da criação de uma interface.  \n */\ninterface CountdownContextData {\n  minutes: number;\n  seconds: number;\n  hasFinished: boolean;\n  isActive: boolean;\n  isCounting: boolean\n  startCountdown: () => void;\n  resetCountdown: () => void;\n}\n\ninterface CountdownProviderProps {\n  children: ReactNode;\n}\n\nexport const CountdownContext = createContext({} as CountdownContextData);\n\nlet countdownTimeout: NodeJS.Timeout;\n\n/** export function CountdownProvider({ children }: CountdownProviderProps) \n *  A função CountextProvider utilzia da interface da \n * estrutura de dados para construir a lógica sintática \n * do cronômetro utilização do useEffect. Além de ana-\n * lisar se o contador está ativo e requisitando as fun\n * ções de acordo com os efeitos que o usuário causar na\n * aplicação.   \n */\nexport function CountdownProvider({ children }: CountdownProviderProps) {\n  const { startNewChallenge } = useContext(ChallengesContext);\n\n  const [time, setTime] = useState(25 * 60);\n  const [isActive, setIsActive] = useState(false);\n  const [hasFinished, setHasFinished] = useState(false);\n\n  const [isCounting, setIsCounting] = useState(false)\n\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setHasFinished(false);\n    setTime(25 * 60);\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time == 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n\n  return (\n    <CountdownContext.Provider\n      value={{\n        minutes,\n        seconds,\n        hasFinished,\n        isActive,\n        isCounting,\n        startCountdown,\n        resetCountdown,\n      }}\n    >\n      {children}\n    </CountdownContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}