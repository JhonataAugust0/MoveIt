{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/jhonata/Jhonata/Programa\\xE7\\xE3o/Projetos/NLW04/MoveIt/src/contexts/ChallengesContext.tsx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/** Imports\n * Importa√ß√£o do createContext, useState, ReactNode,\n * useEffect da biblioteca react, al√©m da importa√ß√£o dos\n * desafios contidos no arquivo challenges.json,\n */\nimport { createContext, useState, useEffect } from \"react\";\nimport { LevelUpModal } from '../components/LevelUpModal';\nimport challenges from \"../../challenges.json\";\nimport Cookies from 'js-cookie';\nexport const ChallengesContext = /*#__PURE__*/createContext({});\n/** export function ChallengesProvider({ children }: ChallengesProviderProps)\n *  A fun√ß√£o ChallengesProvider utiliza da interface da\n * estrutura de dados para construir a l√≥gica sint√°tica\n * do lan√ßamento dos desafios. A fun√ß√£o pede permiss√£o\n * do usu√°rio para enviar notifica√ß√µes via browser, que\n * s√£o lan√ßadas quando o contador chega a 0, informando\n * que h√° um novo desafio para o usu√°rio cumprir.\n * Os desafios s√£o lan√ßados por meio da fun√ß√£o\n * startNewChallenge, que faz uma randomiza√ß√£o dos desafios,\n * para que n√£o haja repeti√ß√£o.\n **/\n\nexport function ChallengesProvider(_ref) {\n  var _rest$level, _rest$currentExperien, _rest$challengesCompl;\n\n  let {\n    children\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"children\"]);\n\n  const {\n    0: level,\n    1: setLevel\n  } = useState((_rest$level = rest.level) !== null && _rest$level !== void 0 ? _rest$level : 1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState((_rest$currentExperien = rest.currentExperience) !== null && _rest$currentExperien !== void 0 ? _rest$currentExperien : 0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState((_rest$challengesCompl = rest.challengesCompleted) !== null && _rest$challengesCompl !== void 0 ? _rest$challengesCompl : 0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const {\n    0: isLevelUpModalOpen,\n    1: setIsLevelUpModalOpen\n  } = useState(false);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n  useEffect(() => {\n    Cookies.set('level', String(level));\n    Cookies.set('currentExperience', String(currentExperience));\n    Cookies.set('challengesCompleted', String(challengesCompleted));\n  }, [level, currentExperience, challengesCompleted]);\n\n  function levelUp() {\n    setLevel(level + 1);\n    setIsLevelUpModalOpen(true);\n  }\n\n  function closeLevelUpModal() {\n    setIsLevelUpModalOpen(false);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n    new Audio(\"/notification.mp3\").play();\n\n    if (Notification.permission === \"granted\") {\n      new Notification(\"Novo desafio ü•≥\", {\n        body: `Valendo ${challenge.amount}xp!`\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completedChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      experienceToNextLevel,\n      challengesCompleted,\n      activeChallenge,\n      levelUp,\n      startNewChallenge,\n      resetChallenge,\n      completedChallenge,\n      closeLevelUpModal\n    },\n    children: [children, isLevelUpModalOpen && /*#__PURE__*/_jsxDEV(LevelUpModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 31\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/jhonata/Jhonata/Programa√ß√£o/Projetos/NLW04/MoveIt/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","useEffect","LevelUpModal","challenges","Cookies","ChallengesContext","ChallengesProvider","children","rest","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","isLevelUpModalOpen","setIsLevelUpModalOpen","experienceToNextLevel","Math","pow","Notification","requestPermission","set","String","levelUp","closeLevelUpModal","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","Audio","play","permission","body","amount","resetChallenge","completedChallenge","finalExperience"],"mappings":"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","sourcesContent":["/** Imports\n * Importa√ß√£o do createContext, useState, ReactNode,\n * useEffect da biblioteca react, al√©m da importa√ß√£o dos\n * desafios contidos no arquivo challenges.json,\n */\nimport { createContext, useState, ReactNode, useEffect } from \"react\";\nimport { LevelUpModal } from '../components/LevelUpModal'\nimport challenges from \"../../challenges.json\";\nimport Cookies from 'js-cookie'\n\ninterface Challenge {\n  type: \"body\" | \"eye\";\n  description: string;\n  amount: number;\n}\n\n/** interface ChallengesContextData\n *  Defini√ß√£o da estrutura de dados do ChallengesContextData,\n * por meio da cria√ß√£o de uma interface.\n */\ninterface ChallengesContextData {\n  level: number;\n  currentExperience: number;\n  challengesCompleted: number;\n  experienceToNextLevel: number;\n  activeChallenge: Challenge;\n  levelUp: () => void;\n  startNewChallenge: () => void;\n  resetChallenge: () => void;\n  completedChallenge: () => void;\n  closeLevelUpModal: () => void;\n}\n\ninterface ChallengesProviderProps {\n  children: ReactNode;\n  level: number;\n  currentExperience: number;\n  challengesCompleted: number;\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData);\n\n/** export function ChallengesProvider({ children }: ChallengesProviderProps)\n *  A fun√ß√£o ChallengesProvider utiliza da interface da\n * estrutura de dados para construir a l√≥gica sint√°tica\n * do lan√ßamento dos desafios. A fun√ß√£o pede permiss√£o\n * do usu√°rio para enviar notifica√ß√µes via browser, que\n * s√£o lan√ßadas quando o contador chega a 0, informando\n * que h√° um novo desafio para o usu√°rio cumprir.\n * Os desafios s√£o lan√ßados por meio da fun√ß√£o\n * startNewChallenge, que faz uma randomiza√ß√£o dos desafios,\n * para que n√£o haja repeti√ß√£o.\n **/\nexport function ChallengesProvider({ children, ...rest }: ChallengesProviderProps) {\n  const [level, setLevel] = useState(rest.level ?? 1);\n  const [currentExperience, setCurrentExperience] = useState(rest.currentExperience ?? 0);\n  const [challengesCompleted, setChallengesCompleted] = useState(rest.challengesCompleted ?? 0);\n\n  const [activeChallenge, setActiveChallenge] = useState(null)\n  const [isLevelUpModalOpen, setIsLevelUpModalOpen] = useState(false)\n\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n\n  useEffect(() => {\n    Cookies.set('level', String(level))\n    Cookies.set('currentExperience', String(currentExperience))\n    Cookies.set('challengesCompleted', String(challengesCompleted))\n  }, [level, currentExperience, challengesCompleted])\n\n  function levelUp() {\n    setLevel(level + 1);\n    setIsLevelUpModalOpen(true)\n  }\n\n  function closeLevelUpModal() {\n    setIsLevelUpModalOpen(false);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n\n    new Audio(\"/notification.mp3\").play();\n\n    if (Notification.permission === \"granted\") {\n      new Notification(\"Novo desafio ü•≥\", {\n        body: `Valendo ${challenge.amount}xp!`,\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completedChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const { amount } = activeChallenge;\n\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return (\n    <ChallengesContext.Provider\n      value={{\n        level,\n        currentExperience,\n        experienceToNextLevel,\n        challengesCompleted,\n        activeChallenge,\n        levelUp,\n        startNewChallenge,\n        resetChallenge,\n        completedChallenge,\n        closeLevelUpModal\n      }}\n    >\n      {children}\n      { isLevelUpModalOpen && <LevelUpModal /> }\n    </ChallengesContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}